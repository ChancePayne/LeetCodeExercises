class NumberOfIslands {
    companion object {
        fun execute() {
            val solution = NumberOfIslands()
            println(solution.numIslands(
            arrayOf(arrayOf('1','1','1','1','0').toCharArray(),
                    arrayOf('1','1','0','1','0').toCharArray(),
                    arrayOf('1','1','0','0','0').toCharArray(),
                    arrayOf('0','0','0','0','0').toCharArray())
            ) == 1)
            println(solution.numIslands(
            arrayOf(arrayOf('1','1','0','0','0').toCharArray(),
                    arrayOf('1','1','0','0','0').toCharArray(),
                    arrayOf('0','0','1','0','0').toCharArray(),
                    arrayOf('0','0','0','1','1').toCharArray())
            ) == 3)
            println(solution.numIslands(
            arrayOf(arrayOf('1','1','1').toCharArray(),
                    arrayOf('0','1','0').toCharArray(),
                    arrayOf('1','1','1').toCharArray())
            ) == 1)
            println(solution.numIslands(
            arrayOf(arrayOf('1','0','1','1','0','1','1').toCharArray())
            ) == 3)
            println(solution.numIslands(
            arrayOf(arrayOf('1').toCharArray(),arrayOf('0').toCharArray(),arrayOf('1').toCharArray(),arrayOf('0').toCharArray(),arrayOf('1').toCharArray(),arrayOf('1').toCharArray())
            ) == 3)
            println(solution.numIslands(
            arrayOf(arrayOf('1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0').toCharArray())
            ) == 2)
            println(solution.numIslands(
            arrayOf(
                arrayOf('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1','0','1','0','1','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('0','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1','1','0','1','1','0','0','0','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1','0','1','0','1','0','0','1','0','1').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('1','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0','0','0','1','1','1','0','1','0','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0','0','1','0','0','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1','0','1','1','1','0','0','1','1','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1','1','1','1','1','1','1','1','0','1').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0').toCharArray(),
                arrayOf('1','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0','0','1','1','1','1','1','1','1','0').toCharArray()
            )
            ))

        }
    }

    fun numIslands(grid: Array<CharArray>): Int {
        return islandFloodFill(grid)
    }

    fun islandFloodFill(grid: Array<CharArray>): Int {
        val codedIsland = Array(grid.size) { IntArray(grid.first().size) { 0 } }
        var counter = 0

        grid.forEachIndexed { rowIndex, row ->
            row.forEachIndexed { cellIndex, cell ->
                if (cell == '1' && codedIsland[rowIndex][cellIndex] == 0) {
                    counter++
                    floodFill(rowIndex, cellIndex, grid, codedIsland, counter)
                }
            }
        }

        return counter
    }

    fun floodFill(r: Int, c: Int, grid: Array<CharArray>, codedIsland: Array<IntArray>, counter: Int) {
        if (r !in grid.indices || c !in grid.first().indices) {
            return
        }

        if (grid[r][c] == '0') {
            return
        }

        if (codedIsland[r][c] != 0) {
            return
        }

        codedIsland[r][c] = counter

        floodFill(r - 1, c, grid, codedIsland, counter)
        floodFill(r, c + 1, grid, codedIsland, counter)
        floodFill(r + 1, c, grid, codedIsland, counter)
        floodFill(r, c - 1, grid, codedIsland, counter)
    }

    private fun islandList(grid: Array<CharArray>): Int {
        val finalIslands = mutableListOf<Array<Array<Boolean>>>()

        grid.forEachIndexed { rowIndex, row ->
            row.forEachIndexed { cellIndex, cell ->
                if (cell == '1') {
                    var matchingIslandIndex = -1
                    finalIslands.forEachIndexed { islandIndex, island ->
                        if (matchingIslandIndex == -1 && rowIndex > 0) { // up
                            if (island[rowIndex - 1][cellIndex]) {
                                matchingIslandIndex = islandIndex
                            }
                        }
                        if (matchingIslandIndex == -1 && cellIndex > 0) { // left
                            if (island[rowIndex][cellIndex - 1]) {
                                matchingIslandIndex = islandIndex
                            }
                        }
                    }
                    if (matchingIslandIndex == -1) {
                        val newIsland = newIsland(grid)
                        newIsland[rowIndex][cellIndex] = true
                        finalIslands.add(newIsland)
                    } else {
                        finalIslands[matchingIslandIndex][rowIndex][cellIndex] = true
                    }
                }
            }
        }

        mergeIslands_forEach(finalIslands)

        return finalIslands.size
    }

    private fun mergeInPlace(a: Array<Array<Boolean>>, b: Array<Array<Boolean>>) {
        a.forEachIndexed { rowIndex, row ->
            row.forEachIndexed { cellIndex, _ ->
                a[rowIndex][cellIndex] = a[rowIndex][cellIndex] || b[rowIndex][cellIndex]
            }
        }
    }

    private fun newIsland(grid: Array<CharArray>) = Array(grid.size) {Array(grid.first().size) { false } }

    private fun mergeIslandLists(finalIslands: MutableList<Array<Array<Boolean>>>) {
        var matchFound: Boolean
        do {
            matchFound = false
            for (index in 0 until finalIslands.size) {
                val islandUnderTest = finalIslands[index]
                var matchingIslandIndex = -1
                for (islandIndex in index until finalIslands.size) {
                    val island = finalIslands[islandIndex]
                    for (rowIndex in islandUnderTest.indices) {
                        val row = islandUnderTest[rowIndex]
                        for (cellIndex in row.indices) {
                            if (row[cellIndex]) {
                                if (island[rowIndex][cellIndex] != islandUnderTest[rowIndex][cellIndex]) {
                                    if (matchingIslandIndex == -1 && rowIndex > 0) { // up
                                        if (island[rowIndex - 1][cellIndex]) {
                                            matchingIslandIndex = islandIndex
                                        }
                                    }
                                    if (matchingIslandIndex == -1 && cellIndex < island.first().size - 2) { // right
                                        if (island[rowIndex][cellIndex + 1]) {
                                            matchingIslandIndex = islandIndex
                                        }
                                    }
                                    if (matchingIslandIndex == -1 && rowIndex < island.size - 2) { // down
                                        if (island[rowIndex + 1][cellIndex]) {
                                            matchingIslandIndex = islandIndex
                                        }
                                    }
                                    if (matchingIslandIndex == -1 && cellIndex > 0) { // left
                                        if (island[rowIndex][cellIndex - 1]) {
                                            matchingIslandIndex = islandIndex
                                        }
                                    }
                                }
                            }
                            if (matchingIslandIndex != -1) {
                                break
                            }
                        }
                        if (matchingIslandIndex != -1) {
                            break
                        }
                    }
                    if (matchingIslandIndex != -1) {
                        break
                    }
                }
                if (matchingIslandIndex != -1) {
                    mergeInPlace(finalIslands[index], finalIslands[matchingIslandIndex])
                    finalIslands.removeAt(matchingIslandIndex)
                    matchFound = true
                }
                if (matchFound) {
                    break

                }
            }
        } while (matchFound)
    }

    private fun mergeIslands_forEach(finalIslands: MutableList<Array<Array<Boolean>>>) {
        var matchFound: Boolean
        do {
            matchFound = false
            for (index in 0 until finalIslands.size) {
                val islandUnderTest = finalIslands[index]
                islandUnderTest.forEachIndexed { rowIndex, row ->
                    row.forEachIndexed { cellIndex, cell ->
                        if (cell) {
                            var matchingIslandIndex = -1
                            finalIslands.forEachIndexed { islandIndex, island ->
                                if (island[rowIndex][cellIndex] != islandUnderTest[rowIndex][cellIndex]) {
                                    if (matchingIslandIndex == -1 && rowIndex > 0) { // up
                                        if (island[rowIndex - 1][cellIndex]) {
                                            matchingIslandIndex = islandIndex
                                        }
                                    }
                                    if (matchingIslandIndex == -1 && cellIndex < island.first().size - 2) { // right
                                        if (island[rowIndex][cellIndex + 1]) {
                                            matchingIslandIndex = islandIndex
                                        }
                                    }
                                    if (matchingIslandIndex == -1 && rowIndex < island.size - 2) { // down
                                        if (island[rowIndex + 1][cellIndex]) {
                                            matchingIslandIndex = islandIndex
                                        }
                                    }
                                    if (matchingIslandIndex == -1 && cellIndex > 0) { // left
                                        if (island[rowIndex][cellIndex - 1]) {
                                            matchingIslandIndex = islandIndex
                                        }
                                    }
                                }
                            }
                            if (matchingIslandIndex != -1) {
                                mergeInPlace(finalIslands[index], finalIslands[matchingIslandIndex])
                                finalIslands.removeAt(matchingIslandIndex)
                                matchFound = true
                            }
                        }
                    }
                }
                if (matchFound) {
                    break
                }
            }
        } while (matchFound)
    }

    private fun printIslands(finalIslands: List<Array<Array<Boolean>>>) {
        finalIslands.forEach { island ->
            island.forEach { row ->
                row.forEach { print(if(it) "X" else "O") }
                println()
            }
            println()
            println()
        }
    }
}